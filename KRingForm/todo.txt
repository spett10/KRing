1. Write in some file (db? export?) the iteration count, and check at runetime its not below "some value". Then yu can export import across versions. 
1. Make the build a self-contained exe (except for folders) so we dont have all these files. 

3. Make textboxes listen to keystrokes instead of copying the plaintextpassword which is obfuscated with **** in gui. Listen for events and inspect keystrokes?
4. consider having a k1 that is derived from user password and salt (update for each time?). Then, use that to encrypt/decrypt the symmetric key used for encrypting the passwords.
Then we can change password for the user, but not need to change the key used for encrypting all the entries, so we dont need to reencrypt. 
7. Integration / automated UI tests with AutoIT scripting? that sounds fun... but kinda needed. the manual testing when there are so many buttons is just ass
12. folder structures for the main view in passwordlist
14. Add more tests to new functionalities
20. How to add 2factor? Email? Sms? but how to authenticate that what we get is good? Send a challenge or something, how do others do it? could be cool
23. make custom .net control that is a textbox that returns a securestring, not plaintext. listen to keystrokes, add to securestring one by one? PasswordBox exists for WPF, but not for windows forms apparently, and we cant use it here. 
24. clean up service stuff, some of it belongs in persistence (file io)


CURRENT TASK:



BUGS:


THREAT MODEL:

We consider an adversary to be an active agent that has access physical access to the users pc during
a user session - that is we assume the adversary is logged in as the user on her (stolen) pc.




INSECURITIES:
The authentication to log on simply reads the data folder that has the hashed password. Any attacker can substitute
the values stored here for hashes produced by the same algorithms and parameters, but with a password he knows.
That would allow an attacker to "log in" - but this would be of little use, since his password would not be the correct one,
that the actual user used. This means the key derviation at runtime for encryption and macs would not be correct,
so he would not be able to decrypt correctly, so he would gain no information. However, its still not a good design. Can we
make this data internal? 


LINKS:
Read more about PBKDF2 here:
	https://security.stackexchange.com/questions/53115/how-to-know-which-output-length-to-request-from-pbkdf2
		https://www.lastpass.com/how-it-works used the above + aes256, so we should aim for the same
			-bouncy castle has PBEwithHmacSHA-256 and others: http://www.bouncycastle.org/csharp/
good discussion about masterpassword usage (which KRing essentially is, if anyone knows your master password, all bets are off )https://security.stackexchange.com/questions/48174/if-i-use-a-good-master-password-in-firefox-is-security-improved-when-i-remember